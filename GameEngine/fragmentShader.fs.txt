#version 400 core
out vec4 FragColor;

struct Material 
{
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


#define NRLIGHTS 2

uniform vec3 viewPos;
uniform Material material;
uniform Light light[NRLIGHTS];


in vec2 v_texCoord;
in vec3 normal;
in vec3 fragPos;

void main()
{
	vec3 ambient = light[0].ambient * texture(material.diffuse, v_texCoord).rgb;
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(light[0].position - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light[0].diffuse * diff * texture(material.diffuse, v_texCoord).rgb;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light[0].specular * (spec * material.specular);
	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);

	//FragColor = texture(material.diffuse, v_texCoord);
}